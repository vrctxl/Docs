"use strict";(self.webpackChunkvrctxl=self.webpackChunkvrctxl||[]).push([[1367],{9941:(e,i,o)=>{o.r(i),o.d(i,{assets:()=>r,contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=o(5893),t=o(1151);const a={sidebar_position:1},d="AudioLink",s={id:"video-txl/third-party/audiolink",title:"AudioLink",description:"AudioLink is a project that creates a standardized audio reactive system for prefabs and shaders",source:"@site/docs/video-txl/third-party/audiolink.md",sourceDirName:"video-txl/third-party",slug:"/video-txl/third-party/audiolink",permalink:"/Docs/docs/video-txl/third-party/audiolink",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"VideoTXL",permalink:"/Docs/docs/video-txl/"},next:{title:"LTCGI",permalink:"/Docs/docs/video-txl/third-party/ltcgi"}},r={},l=[{value:"Installation Guide",id:"installation-guide",level:2},{value:"Setup AudioLink",id:"setup-audiolink",level:3},{value:"Configure VideoTXL",id:"configure-videotxl",level:3},{value:"Try It Out",id:"try-it-out",level:3},{value:"AudioLink Configuration with Audio Profiles",id:"audiolink-configuration-with-audio-profiles",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Check that AudioLink is linked",id:"check-that-audiolink-is-linked",level:4},{value:"Check that the AudioSource is being set on AudioLink",id:"check-that-the-audiosource-is-being-set-on-audiolink",level:4},{value:"Check that the AudioSource volume is high enough",id:"check-that-the-audiosource-volume-is-high-enough",level:4}];function u(e){const i={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{GameObject:a}=i;return a||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GameObject",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"audiolink",children:"AudioLink"}),"\n",(0,n.jsx)(i.p,{children:"AudioLink is a project that creates a standardized audio reactive system for prefabs and shaders\nthat can be used in worlds or on avatars."}),"\n",(0,n.jsx)(i.p,{children:"AudioLink is fed by a Unity AudioSource, usually from a video player.  VideoTXL can be setup with\nmultiple video sources and audio profiles, so the video player needs to be linked to the AudioLink\ncontroller.  Once linked, it will manage setting and swapping the audio sources for you."}),"\n",(0,n.jsx)(i.admonition,{title:"LTCGI Resources",type:"info",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"https://github.com/llealloo/vrc-udon-audio-link",children:"GitHub Repository"})}),"\n"]})}),"\n",(0,n.jsx)(i.h2,{id:"installation-guide",children:"Installation Guide"}),"\n",(0,n.jsx)(i.p,{children:"The following guide will walk you through setting up AudioLink in your scene and linking it with a\ndefault VideoTXL sync video player setup."}),"\n",(0,n.jsx)(i.p,{children:"AudioLink is available in the VRChat Creator Companion by default as a curated package.  Start by\nadding that package if you haven't already done so."}),"\n",(0,n.jsx)(i.h3,{id:"setup-audiolink",children:"Setup AudioLink"}),"\n",(0,n.jsx)(i.p,{children:"Skip this step if you've already setup the AudioLink controller in your world."}),"\n",(0,n.jsx)(i.p,{children:"Use the top-level menu to add the AudioLink prefabs to your scene:"}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsx)(i.p,{children:"`Tools -> AudioLink -> Add AudioLink Prefab to Scene"}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["This will create an ",(0,n.jsx)(a,{type:"prefab",name:"AudioLink"})," node, which is the main AudioLink object.\nIt will also add an ",(0,n.jsx)(a,{type:"prefab",name:"AudioLinkController"})," node, which is a mobile UI object\nfor controlling AudioLink parameters in your world."]}),"\n",(0,n.jsx)(i.p,{children:"By default, the AudioLink object will come with its Audio Source set to an internal input object that has a\nVRC AVPro Video Speaker script on it.  This input object will not be used, but it's okay to leave it set\non the prefab.  The video player will replace it at runtime."}),"\n",(0,n.jsx)(i.h3,{id:"configure-videotxl",children:"Configure VideoTXL"}),"\n",(0,n.jsx)(i.p,{children:"This guide assumes you've started by adding a fresh Sync Video Player to the scene, which you can do by utilizing\nthe GameObject menu:"}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"GameObject -> TXL -> VideoTXL -> Sync Video Player"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"You can also drag the prefab directly from the Packages folder, although adding objects and components from the GameObject\nmenu can have the benefit of ensuring more things are automatically hooked up correctly for you."}),"\n",(0,n.jsxs)(i.p,{children:["Expand the ",(0,n.jsx)(a,{type:"variant",name:"Sync Video Player"})," node, and select the ",(0,n.jsx)(a,{type:"prefab",name:"Audio Manager"}),".  The\ndefault configuration looks like this:"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"Audio Manager",src:o(1864).Z+"",width:"519",height:"668"})}),"\n",(0,n.jsxs)(i.p,{children:["Under ",(0,n.jsx)(i.strong,{children:"External Systems"}),", there is a section for AudioLink.  The inspector will tell you if AudioLink has been detected\nin the project, and if it's already linked to another video player.  Clicking the ",(0,n.jsx)(i.strong,{children:"Link AudioLink to this manager"})," button\nwill set the AudioLink reference to the AudioLink object you added earlier."]}),"\n",(0,n.jsx)(i.admonition,{type:"warning",children:(0,n.jsx)(i.p,{children:"You'll get a warning if multiple video players have been linked to the AudioLink object.  It's indeterminate which video player's\naudio source will be used in this case.  For supporting multiple video players, there is API to link and unlink AudioLink."})}),"\n",(0,n.jsx)(i.h3,{id:"try-it-out",children:"Try It Out"}),"\n",(0,n.jsx)(i.p,{children:"You can test AudioLink in the client sim by loading a video (e.g. from YouTube) with a Unity video source.  You should see\nAudioLink's controller box reacting to the audio."}),"\n",(0,n.jsx)(i.h2,{id:"audiolink-configuration-with-audio-profiles",children:"AudioLink Configuration with Audio Profiles"}),"\n",(0,n.jsx)(i.p,{children:"VideoTXL supports the concept of multiple Audio Profiles, wach of which can be setup with different numbers and configurations\nof audio sources.  Each Audio Profile itself also needs to accomodate differences and limitations between Unity and AVPro\nvideo sources."}),"\n",(0,n.jsxs)(i.p,{children:["In each audio profile, there will generally be one Unity audio source defined, and then one or more AVPro audio sources defined.\nThese audio sources include an additional script called ",(0,n.jsx)(i.strong,{children:"Audio Channel"})," that includes extra configuration for VideoTXL's\nAudio Manager."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"Audio Channel Inspector",src:o(8843).Z+"",width:"507",height:"308"})}),"\n",(0,n.jsxs)(i.p,{children:["These audio source and script combinations are actually ",(0,n.jsx)(i.strong,{children:"templates"}),' that are used for creating a mirrored set of audio sources\nfor each video source under the Video Manager. It\'s those generated audio sources that will potentially be set on the main\nAudioLink object at runtime.  The "template" audio sources will never be used directly.']}),"\n",(0,n.jsxs)(i.p,{children:["One of the Audio Channel settings is the ",(0,n.jsx)(i.strong,{children:"Audio Link Source"}),".  When this box is checked, the corresponding generated audio\nsource will be used for AudioLink when the audio profile / video source combo is active."]}),"\n",(0,n.jsx)(i.p,{children:"Because of limitations with Unity video sources, there is only one audio source defined and it will normally have the Audio Link\nSource option checked.  These sources depend on AudioLink's feature to adjust its gain dynamically with changes in the AudioSource\nvolume."}),"\n",(0,n.jsxs)(i.p,{children:["For AVPro, it's normal for ",(0,n.jsx)(i.strong,{children:"none"})," of the audio sources to have this option checked.  This is because the AVPro video sources\nhave an additional special AudioSource, called ",(0,n.jsx)(a,{name:"ReservedAudioSource"})," in the hierarchy, that is already\nconfigured to work as an AudioLink audio source.  This special reserved source exists to work around some other problems with\nAVPro audio, but it will also be used for AudioLink if none of the other defined sources have the Audio Link Source option\nchecked off."]}),"\n",(0,n.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,n.jsx)(i.p,{children:"Most troubleshooting is easiest to do in the client sim."}),"\n",(0,n.jsx)(i.h4,{id:"check-that-audiolink-is-linked",children:"Check that AudioLink is linked"}),"\n",(0,n.jsx)(i.p,{children:"Double-check that AudioLink has been linked in your Audio Manager, and make sure you aren't seeing warnings about other video\nplayer instances also being linked to AudioLink."}),"\n",(0,n.jsx)(i.h4,{id:"check-that-the-audiosource-is-being-set-on-audiolink",children:"Check that the AudioSource is being set on AudioLink"}),"\n",(0,n.jsxs)(i.p,{children:["Start the client sim, then check the main ",(0,n.jsx)(a,{type:"prefab",name:"AudioLink"})," object.  Check that an AudioSource has\nbeen set on its ",(0,n.jsx)(i.strong,{children:"Audio Source"})," field.  Check that the AudioSource is actually from the video player, and is part of the\ncurrently selected video source."]}),"\n",(0,n.jsx)(i.h4,{id:"check-that-the-audiosource-volume-is-high-enough",children:"Check that the AudioSource volume is high enough"}),"\n",(0,n.jsxs)(i.p,{children:["With the sim running, select the AudioSource you confirmed in the previous step, and make sure it is ",(0,n.jsx)(i.strong,{children:"enabled"}),", that the\n",(0,n.jsx)(i.strong,{children:"Mute"})," option isn't checked, and that its ",(0,n.jsx)(i.strong,{children:"Volume"})," value is at least 0.01 or greater.  If you're using audio profiles that\nhave volume falloff or simulate volume falloff, you may be surprised to find a really low value here."]}),"\n",(0,n.jsx)(i.p,{children:"The volume will also be influenced by the mute and volume controls on the video player, so make sure those are also reasonable."})]})}function c(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8843:(e,i,o)=>{o.d(i,{Z:()=>n});const n=o.p+"assets/images/third-party-audiolink-audiochannel-19910e281e0039c49e3e2e5a6781dd2d.png"},1864:(e,i,o)=>{o.d(i,{Z:()=>n});const n=o.p+"assets/images/third-party-audiolink-audioman-4a850a1a825a8c46d8355b0b045d9fe3.png"},1151:(e,i,o)=>{o.d(i,{Z:()=>s,a:()=>d});var n=o(7294);const t={},a=n.createContext(t);function d(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);