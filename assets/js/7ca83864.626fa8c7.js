"use strict";(self.webpackChunkvrctxl=self.webpackChunkvrctxl||[]).push([[278],{3822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>h});var i=n(5893),o=n(1151);const r={sidebar_position:2},s="LTCGI",a={id:"video-txl/third-party/ltcgi",title:"LTCGI",description:"LTCGI by \\pi\\ is a realtime area light solution for VRChat, and is one of the available solutions for",source:"@site/docs/video-txl/third-party/ltcgi.md",sourceDirName:"video-txl/third-party",slug:"/video-txl/third-party/ltcgi",permalink:"/Docs/docs/video-txl/third-party/ltcgi",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"VideoTXL",permalink:"/Docs/docs/video-txl/"},next:{title:"Changelog",permalink:"/Docs/docs/video-txl/changelog"}},d={},h=[{value:"Installation Guide",id:"installation-guide",level:2},{value:"Configure VideoTXL",id:"configure-videotxl",level:3},{value:"Add The LTCGI Controller",id:"add-the-ltcgi-controller",level:3},{value:"Add the LTCGI Screen Component",id:"add-the-ltcgi-screen-component",level:3},{value:"Scene Material Setup",id:"scene-material-setup",level:3},{value:"Try It Out",id:"try-it-out",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3},{value:"Check the CRT",id:"check-the-crt",level:4},{value:"Check the LTCGI Autogenerated Data",id:"check-the-ltcgi-autogenerated-data",level:4}];function c(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components},{GameObject:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GameObject",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"ltcgi",children:"LTCGI"}),"\n",(0,i.jsx)(t.p,{children:"LTCGI by _pi_ is a realtime area light solution for VRChat, and is one of the available solutions for\nrealtime area lighting from video sources."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"LTCGI Preview",src:n(1517).Z+"",width:"654",height:"482"})}),"\n",(0,i.jsx)(t.admonition,{title:"LTCGI Resources",type:"info",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://ltcgi.dev",children:"Official Documentation Site"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://vpm.pimaker.at",children:"VPM Repository"})}),"\n"]})}),"\n",(0,i.jsx)(t.h2,{id:"installation-guide",children:"Installation Guide"}),"\n",(0,i.jsx)(t.p,{children:"The following guide walks through adding LTCGI to your scene and setting it up with a default VideoTXL sync video\nplayer setup.  Refer back to the LTCGI documentation site for more detail on all the various ways to configure\nLTCGI, but you should avoid their page Realtime Video Setup, as the information contained there is not applicable."}),"\n",(0,i.jsx)(t.p,{children:"LTCGI will work out of the box without any additional video adapter necessary when using a CRT configured in\nVideoTXL's Screen Manager."}),"\n",(0,i.jsx)(t.h3,{id:"configure-videotxl",children:"Configure VideoTXL"}),"\n",(0,i.jsx)(t.p,{children:"This guide assumes you've started by adding a fresh Sync Video Player to the scene, which you can do by utilizing\nthe GameObject menu:"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"GameObject -> TXL -> VideoTXL -> Sync Video Player"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"You can also drag the prefab directly from the Packages folder, although adding objects and components from the GameObject\nmenu can have the benefit of ensuring more things are automatically hooked up correctly for you."}),"\n",(0,i.jsxs)(t.p,{children:["Expand the ",(0,i.jsx)(r,{type:"variant",name:"Sync Video Player"})," node, and select the ",(0,i.jsx)(r,{type:"prefab",name:"Screen Manager"}),".  The\ndefault configuration looks like this:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Screen Manager",src:n(6004).Z+"",width:"516",height:"758"})}),"\n",(0,i.jsxs)(t.p,{children:["Under ",(0,i.jsx)(t.strong,{children:"Render Texture Output"}),", click the ",(0,i.jsx)(t.strong,{children:"plus (+)"})," on the list to add a new Output CRT.  This will create two assets\nin your project, in a directory next to your scene file with the same name as the scene.  The first of those files is\n",(0,i.jsx)(t.strong,{children:"VideoTXLCRT-0.asset"}),", though the number may be different if you already have other CRT resources created in your project.\nRemember this asset, as this is the video texture that you will provide to LTCGI."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Screen Manager CRT",src:n(3146).Z+"",width:"513",height:"212"})}),"\n",(0,i.jsx)(t.p,{children:"CRTs are configured by default to be reasonable for video render, and these settings will also work fine as-is for LTCGI.\nChanging any of the options should still work with LTCGI."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"You can use the same CRT as the video texture for any number of materials in your scene, and the texture has already been\ncorrected for Y-flip, gamma, aspect ratio fit, etc."})}),"\n",(0,i.jsx)(t.h3,{id:"add-the-ltcgi-controller",children:"Add The LTCGI Controller"}),"\n",(0,i.jsx)(t.p,{children:"Add the LTCGI controller by dragging its prefab into your scene.  The prefab is located in:"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"Packages/LTCGI/LTCGI Controller.prefab"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Select the new ",(0,i.jsx)(r,{name:"LTCGI Controller"})," node."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"LTCGI Controller Component",src:n(335).Z+"",width:"508",height:"859"})}),"\n",(0,i.jsxs)(t.p,{children:["The only setting you need to change here is setting the ",(0,i.jsx)(t.strong,{children:"Video Texture"})," field.  Set this to the ",(0,i.jsx)(t.strong,{children:"VideoTXLCRT-0.asset"})," asset\nthat you created in the previous step.  At this point, LTCGI may have created an additional script on the object called the\n",(0,i.jsx)(t.strong,{children:"LTCGI_Udon Adapter"}),".  This is an internal data script that's auto-generated by LTCGI.  Do not try to edit this script."]}),"\n",(0,i.jsx)(t.h3,{id:"add-the-ltcgi-screen-component",children:"Add the LTCGI Screen Component"}),"\n",(0,i.jsxs)(t.p,{children:["LTCGI needs to know about your screen.  To do this, you'll need to add an ",(0,i.jsx)(t.strong,{children:"LTCGI_Screen"})," component to your screen.  This component\nis an editor script that's used to capture data about your screen."]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"LTCGI_Screen"})," component can only be added to a mesh that's a single quad or tri, such as the built-in Unity quad."]})}),"\n",(0,i.jsxs)(t.p,{children:["Since the screen that comes with Sync Video Player prefab is a quad, it's possible to add the screen component to it directly.\nExpand the ",(0,i.jsx)(r,{type:"prefab",name:"Screen Manager"})," in your hierarchy to find the ",(0,i.jsx)(r,{name:"Quad"})," object,\nwhich is the default screen.  Click ",(0,i.jsx)(t.strong,{children:"Add Component"})," and search for the LTCGI Screen component."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["If you're using a screen object that's not a simple quad, such as a flat screen TV mesh with a separate material slot for the video\ntexture, you can create a separate Unity quad and position it in front of the screen.  Disable the ",(0,i.jsx)(t.strong,{children:"Mesh Renderer"})," component on\nthe quad to make this LTCGI emitter invisible."]})}),"\n",(0,i.jsxs)(t.p,{children:["You'll need to make one change to the configuration.  Change the ",(0,i.jsx)(t.strong,{children:"Color Mode"})," field to ",(0,i.jsx)(t.strong,{children:"Texture"}),", and then make sure the\n",(0,i.jsx)(t.strong,{children:"Texture Index"})," is kept at 0.  This maps the video texture to the screen in LTCGI."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"LTCGI Screen Component",src:n(8128).Z+"",width:"505",height:"645"})}),"\n",(0,i.jsx)(t.p,{children:"Saving your scene should force this data to be updated back on the main LTCGI controller object."}),"\n",(0,i.jsx)(t.h3,{id:"scene-material-setup",children:"Scene Material Setup"}),"\n",(0,i.jsxs)(t.p,{children:["LTCGI requires compatible materials on your walls and other meshes in order for light to be reflected.  You can make these materials\nusing LTCGI's own ",(0,i.jsx)(t.strong,{children:"LTCGI_Surface"})," shader.  The project maintains a list of compatible shaders\n",(0,i.jsx)(t.a,{href:"https://github.com/PiMaker/ltcgi#supported-shaders",children:"here"}),", but there may be others."]}),"\n",(0,i.jsx)(t.p,{children:"Make sure the surfaces you intend to be reflective have been setup with compatible materials."}),"\n",(0,i.jsx)(t.h3,{id:"try-it-out",children:"Try It Out"}),"\n",(0,i.jsx)(t.p,{children:"This should be everything you need to get a basic LTCGI scene going with the video player.  You can test this with the VRChat\nClient Sim and loading a video with a Unity-based video source.  If the system doesn't appear to be working, but your video is\nshowing up on the screen, try the troubleshooting topics below."}),"\n",(0,i.jsx)(t.h3,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(t.h4,{id:"check-the-crt",children:"Check the CRT"}),"\n",(0,i.jsx)(t.p,{children:"Make sure the CRT is actually updating with video data.  If you select the CRT asset in the editor while the simulator is running,\nyou should be able to see its current content in a preview window in the lower right.  This content won't necessarily update in\nrealtime, but moving your mouse over it should cause some updates to happen."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"CRT Preview",src:n(5129).Z+"",width:"521",height:"229"})}),"\n",(0,i.jsxs)(t.p,{children:["Make sure this CRT is showing you video or placeholder data that you expect to see.  If you kept using the default screen that\ncame on the ",(0,i.jsx)(t.strong,{children:"Sync Video Player"})," prefab, it gets its video data from a separate material and Material Property Block override,\nso it wouldn't depend on the CRT functioning correctly."]}),"\n",(0,i.jsx)(t.h4,{id:"check-the-ltcgi-autogenerated-data",children:"Check the LTCGI Autogenerated Data"}),"\n",(0,i.jsxs)(t.p,{children:["The main ",(0,i.jsx)(t.strong,{children:"LTCGI Controller"})," object has an ",(0,i.jsx)(t.strong,{children:"LTCGI_Udon Adapter"})," script that gets added and updated automatically.  This script\nshould be present, and the ",(0,i.jsx)(t.strong,{children:"Screens"})," array should list the LTCGI_Screen component that you added earlier, along with any other\nscreens you've put in your scene.  The ",(0,i.jsx)(t.strong,{children:"Renderers"})," array should also list various meshes in your scene that have compatible\nmaterials to reflect light.  The first element of the ",(0,i.jsx)(t.strong,{children:"LTCGI_LO Ds"})," array should show the CRT you set."]}),"\n",(0,i.jsxs)(t.p,{children:["If all of those things aren't true, try pressing the ",(0,i.jsx)(t.strong,{children:"Force Update"})," button on the controller, and check again.  If any of those\nthings are still not correct, re-check your setup."]})]})}function l(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},335:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/third-party-ltcgi-controller-a2a079ce31e874f63c414ab9c3be4b49.png"},5129:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/third-party-ltcgi-crt-preview-460b260ed2b682c7e150fd5640d20493.png"},1517:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/third-party-ltcgi-demo-286d8926f98b52893a6bfd734039a537.png"},8128:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/third-party-ltcgi-screen-26dd208102244c257e3124591888db71.png"},6004:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/third-party-ltcgi-screenman-1-6dd6406ff3ea4362d840e596ee060c60.png"},3146:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/third-party-ltcgi-screenman-2-0cde26413212c1138a8ac1ebfe064610.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var i=n(7294);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);